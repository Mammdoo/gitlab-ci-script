.unified-before-base:
  script: |
    set -e -o pipefail
    isFileExist() {
      filePath=$1
      if [ ! -f $filePath ]; then
        return 1
      fi
    }

    nonZeroReturnThenSkip() {
      if [[ $? != 0 ]]; then
          echo "skip message: $1"
          continue
      fi
    }

     nonZeroReturnThenBreak() {
      if [[ $? != 0 ]]; then
          echo "break message: $1"
          break
      fi
    }

     nonZeroReturnThenExit() {
      if [[ $? != 0 ]]; then
          echo "Exit message: $1"
          exit 1
      fi
    }

    fqdn() {
      name=$1
      docker run -it --rm mammdoo/pipeline-assistant:1.1.1 python3 convertFQDN.py $name
    }
    
    if [ -z $CICD_TEMPLATE_PATH ]; then
      export CICD_TEMPLATE_PATH=.gitlab-ci/svc
    fi

    if [ -z $CLUSTER_TARGET ]; then
      export CLUSTER_TARGET=$(docker run -it --rm mammdoo/pipeline-assistant:1.1.1 python3 getCluster.py github $CI_COMMIT_REF_NAME )
    fi

    export SERVICE_FQDN=$(fqdn $CI_PROJECT_NAME)

.unified-before-docker:
  script: |
    if [ ! -z $DOCKER_REGISTRY_PRIVATE_HOST && ! -z $DOCKER_REGISTRY_PRIVATE_NAMESPACE && ! -z $DOCKER_REGISTRY_PRIVATE_USER && ! -z $DOCKER_REGISTRY_PRIVATE_TOKEN ]; then
      export DOCKER_REGISTRY_PRIVATE=enabled
    fi

    if [ -z $DOCKER_REGISTRY_PUBLIC_STATUS ]; then
      export DOCKER_REGISTRY_PUBLIC_STATUS=$(docker run -it --rm mammdoo/pipeline-assistant:1.1.1 python3 getPublicRegistryStatus.py github $CI_COMMIT_REF_NAME )
    fi

    if [ ! -z $DOCKER_REGISTRY_PUBLIC_HOST && ! -z $DOCKER_REGISTRY_PUBLIC_NAMESPACE ! -z $DOCKER_REGISTRY_PUBLIC_USER && ! -z $DOCKER_REGISTRY_PUBLIC_TOKEN ]; then
      if [[ $DOCKER_REGISTRY_PUBLIC_STATUS == "enabled" ]]; then
        export DOCKER_REGISTRY_PUBLIC=enabled
      fi
    fi

    docker_login() {
      echo "Ready login $DOCKER_REGISTRY_PRIVATE"
      docker login ${DOCKER_REGISTRY_PRIVATE_HOST} --username ${DOCKER_REGISTRY_PRIVATE_USER} --password ${DOCKER_REGISTRY_PRIVATE_TOKEN}

      if [[ $DOCKER_REGISTRY_PUBLIC == "enabled" ]]; then
        echo "Ready login $DOCKER_REGISTRY_PUBLIC"
        docker login ${DOCKER_REGISTRY_PUBLIC_HOST} --username ${DOCKER_REGISTRY_PUBLIC_USER} --password ${DOCKER_REGISTRY_PUBLIC_TOKEN}
      fi
    }

    docker_logout() {
      docker logout ${DOCKER_REGISTRY_PRIVATE_HOST}

      if [[ $DOCKER_REGISTRY_PUBLIC == "enabled" ]]; then
        docker logout ${DOCKER_REGISTRY_PUBLIC_HOST}
      fi
    }

    docker_build() {
      DockerfilePath=$1
      SERVICE_NAME=$2
      SERVICE_COMMITID=$3

      docker_args=""
      for arg in `printenv | grep DOCKER_BUILD_ARGS_ | awk -F '=' '{print $1}'`; do
        arg_name=$(echo $arg | sed 's|DOCKER_BUILD_ARGS_||g') 
        docker_args="${docker_args}--build-arg ${arg_name}=${!arg} "
      done

      docker_build_cmdline="docker build -f $DockerfilePath $docker_args -t registry.local/$SERVICE_NAME:$SERVICE_COMMITID ."
      $docker_build_cmdline
    }

    docker_pull() {
      REGISTRY_URL=$1
      SERVICE_NAME=$2
      SERVICE_COMMITID=$3

      set +e
      for i in $(seq 1 90)
      do
          docker pull $REGISTRY_URL/$SERVICE_NAME:$SERVICE_COMMITID
          if [[ $? -ne 0 ]]; then
          pull_state="fail"
          echo "正在等待${SERVICE_COMMITID}的首次构建完成，tag流程不执行构建流程，仅基于commit的镜像做别名"
          sleep 10
          else
          pull_state="success"
          break
          fi
      done

      set -e
      if [[ "$pull_state" == "fail" ]]; then
          echo "本次tag对应的commitid尚未完成构建，需要等$3所对应的pipeline完成Baking后，retry本任务即可"
          exit 1
      fi

      docker tag $REGISTRY_URL/$SERVICE_NAME:$SERVICE_COMMITID registry.local/$SERVICE_NAME:$SERVICE_COMMITID
      docker rmi $REGISTRY_URL/$SERVICE_NAME:$SERVICE_COMMITID
    }

    docker_push() {
      REGISTRY_URL=$1
      SERVICE_NAME=$2
      SERVICE_COMMITID=$3
      SERVICE_VERSION=$4

      docker tag registry.local/$SERVICE_NAME:$SERVICE_COMMITID $REGISTRY_URL/$SERVICE_NAME:$SERVICE_VERSION
      docker push $REGISTRY_URL/$SERVICE_NAME:$SERVICE_VERSION
      docker rmi $REGISTRY_URL/$SERVICE_NAME:$SERVICE_VERSION
    }

    docker_rmi() {
      SERVICE_NAME=$1
      SERVICE_COMMITID=$2

      docker rmi registry.local/$SERVICE_NAME:$SERVICE_COMMITID
    }

.unified-before-upload:
  script: |
    rename_to_jinja() {
      jinja_file_dir=$1
      jinja_file_name=$2
      jinja_file_path=${jinja_file_dir}/${jinja_file_name}
      if [ -f $jinja_file_path ]; then
        filename=$(echo $jinja_file_name | awk -F '.' '{print $1}')
        mv $jinja_file_path ${jinja_file_dir}/${filename}.j2
      fi
    }

    gitlab_package_registry_upload() {
      FILE_PATH=$1
      PACKAGE_REGISTRY_URL=$2
      PACKAGE_REGISTRY_TOKEN=$3

      curl --header "PRIVATE-TOKEN: $PACKAGE_REGISTRY_TOKEN" --upload-file $FILE_PATH $PACKAGE_REGISTRY_URL
    
    }

    gitlab_package_registry_url() {
      PACKAGE_REGISTRY_HOST=$1
      PACKAGE_REGISTRY_NS_TYPE=$2
      PACKAGE_REGISTRY_NS_TYPE_ID=$3
      PACKAGE_REGISTRY_SERVICE_TYPE=$4
      PAKCAGE_REGISTRY_SERVICE_PATH=$5

      package_registry_url="https://${PACKAGE_REGISTRY_HOST}/api/v4/${PACKAGE_REGISTRY_NS_TYPE}/${PACKAGE_REGISTRY_NS_TYPE_ID}/packages/${PACKAGE_REGISTRY_SERVICE_TYPE}/${PAKCAGE_REGISTRY_SERVICE_PATH}"
      echo $package_registry_url
    }

    upload_gitlab_package_registry() {
      SERVICE_VERSION=$2
      
      rename_jinja_to_yml $k8s_template_filepath

      if [ -z $PACKAGE_REGISTRY_HOST || $PACKAGE_REGISTRY_GROUP_ID ]; then
        echo "Missing package registry url, skipped workflow"
        exit 0
      fi

    }
    
    upload_k8s_templates_to_gitlab_package_registry() {
      K8S_TEMPLATE_FILEPATH=$1
      SERVICE_VERSION=$2

      k8s_template_filepath=${CICD_TEMPLATE_PATH}/${SERVICE_NAME}/k8s


      if [ ! -d $k8s_template_filepath ]; then


      if [ -f $K8S_TEMPLATE_FILEPATH/configmap.j2 ]; then
          curl --header "PRIVATE-TOKEN: $token" --upload-file $K8S_TEMPLATE_FILEPATH/configmap.j2 $package_registry_url/configmap.yml
      fi

      if [ -f $K8S_TEMPLATE_FILEPATH/configmap.yml ]; then
          curl --header "PRIVATE-TOKEN: $token" --upload-file $K8S_TEMPLATE_FILEPATH/configmap.yml $package_registry_url/configmap.yml
      fi

      if [ -f $K8S_TEMPLATE_FILEPATH/deployment.j2 ]; then
          curl --header "PRIVATE-TOKEN: $token" --upload-file $K8S_TEMPLATE_FILEPATH/deployment.j2 $package_registry_url/deployment.yml
      fi

      if [ -f $K8S_TEMPLATE_FILEPATH/deployment.yml ]; then
          curl --header "PRIVATE-TOKEN: $token" --upload-file $K8S_TEMPLATE_FILEPATH/deployment.yml $package_registry_url/deployment.yml
      fi

    }

.unified-before-export-demo:
  script: |
